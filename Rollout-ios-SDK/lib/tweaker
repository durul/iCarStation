#!/bin/bash
MODE="production"
LIB_DIR=$(dirname "$0")
ROLLOUT_DIR=$(dirname "$LIB_DIR")
CACHE_DIR="${ROLLOUT_DIR}/.cache"
if [[ "$ROLLOUT_DIR" =~ /Pods/Rollout\.io$ ]]; then
  STRUCTURES_DIR="${ROLLOUT_DIR}/../../Rollout-ios-SDK/.structures"
else
  STRUCTURES_DIR="${ROLLOUT_DIR}/.structures"
fi
STRUCTURES_PENDING_UPLOAD_DIR="${STRUCTURES_DIR}/pending_upload"
STRUCTURES_ARCHIVE_DIR="${STRUCTURES_DIR}/archive"
LOG_FILE="/tmp/tweaker_$$.log"
ERR_FILE="/tmp/tweaker_$$.err"
JSON_WITH_DATA="$CACHE_DIR/tweaker_functions.json"
JSON_WITHOUT_DATA="$CACHE_DIR/tweaker_functions_stripped.json"
TMP_FILE="/tmp/tweaker_tmp_$$"

function extract_objc_function(){
  local f="$1"
  local append_to="$2"
  local md5=$(md5 -q "$f")
  local basename_f=${f##*/}
  local cache_file="$CACHE_DIR/${NATIVE_ARCH}.$TARGETNAME.$md5.$basename_f"
  if [ ! -s "$cache_file" ]; then
    echo "Rollout: cache not found for $f ($md5)"
    local flags=("-ObjC" "-arch" "$NATIVE_ARCH" "-include" "$GCC_PREFIX_HEADER" "-D" "ROLLOUT_TRANSPARENT" "-isysroot" "$SDKROOT")
    if [[ $NATIVE_ARCH == "i386" ]] ; then 
      flags+=("-mios-simulator-version-min=$IPHONEOS_DEPLOYMENT_TARGET")
    fi
    for i in $HEADER_SEARCH_PATHS $TARGET_TEMP_DIR/*.hmap ; do 
      flags+=("-I" "$i")
    done
    for i in $LIBRARY_SEARCH_PATHS; do 
      flags+=("-F" "$i")
    done
    for i in $OTHER_CFLAGS; do
      flags+=($(echo $i|  tr \$'"' \$' '))
    done
    echo "Rollout running extract_objc_function with "${flags[@]}" $f" >> $LOG_FILE
    local clang_exit_status=0
    if [ $MODE == "debug" ] ; then 
      xcrun clang -E "${flags[@]}" "$f" 1> /dev/null 2>>$ERR_FILE
      clang_exit_status=$?
    fi
    if [  $clang_exit_status -eq 0 ] ;then 
      echo "Success: xcrun clang -E "${flags[@]}" $f"  >> $LOG_FILE
      "${LIB_DIR}/extract_objc_function" "${flags[@]}" "$f" >> "$cache_file"  || echo "Rollout: !!!! Problem extracting symbols from $f"
    else
      echo "Failed: xcrun clang -E "${flags[@]}" $f" | tee -a $ERR_FILE 
    fi
  fi
  if [ -r "$cache_file" ] ;then 
   cat "$cache_file" >> "$append_to"
   if [[ "$basename_f" == "RolloutDynamic.m" ]] ; then
      local rollout_install_sanity="$CACHE_DIR/sanity.$TARGETNAME.${NATIVE_ARCH}.log"
      echo "FRAMEWORK_SEARCH_PATHS=$FRAMEWORK_SEARCH_PATHS" > "$rollout_install_sanity"
      cat "$cache_file" >> "$rollout_install_sanity"
   fi
  else
    echo "[]" >> "$append_to"
  fi
}

get_info_plist_value() {
  /usr/libexec/PlistBuddy -c "Print $1" "$INFOPLIST_FILE"
}

unset app_key help exit disable_upload clean
while getopts "k:hmc" option; do
  case $option in
    k)
      app_key=$OPTARG
      ;;
    h)
      help=1
      ;;
    m)
      disable_upload=1
      ;;
    c)
      clean=1
      ;;
    *)
      exit=1
      ;;
  esac
done

[ -z "$help" ] || {
  cat << EOF
Usage:
$0 <options>

  -k <app key>           Rollout app key (required)
  -m                     disable uploading of structure json to Rollout server
  -c                     clean the cache directory
  -h                     this help message
EOF
  exit
}

[ -z "$exit" ] || exit 1

[ -z "$clean" ] || {
  echo Cleanning cache dir
  rm -vfr "$CACHE_DIR"
  exit 0
}

[ -n "$app_key" ] || { echo "app_key argument is required" 1>&2; exit 2; }

echo "Rollout pre compile script"
is_first=true
mkdir -p "$CACHE_DIR"
echo -ne "[" > "$TMP_FILE"
cat "$LIB_DIR"/static_json_part >> $TMP_FILE
date  +"%s : start to read code" >> $LOG_FILE
files_count=$("${LIB_DIR}/print_compiled_files.rb" "$PROJECT_FILE_PATH" "$TARGETNAME" | tr '\000' '\n'| wc -l | tr -d " ")
counter=0
while read -r -d $'\0' f ; do
  echo "Rollout: extracting file $counter of $files_count"
  counter=$((counter + 1))
  $is_first ||  echo "," >> "$TMP_FILE"
  is_first=false
  date  +"  %s : $f" >> $LOG_FILE
  extract_objc_function "$f"  "$TMP_FILE" 
done < <("${LIB_DIR}/print_compiled_files.rb" "$PROJECT_FILE_PATH" "$TARGETNAME")
date  +"%s : done reading code" >> $LOG_FILE
echo -ne "]" >> "$TMP_FILE"

data_md5=$(cat "$TMP_FILE" | md5)
preprocessor_debug=`( eval $GCC_PREPROCESSOR_DEFINITIONS; echo $DEBUG )`
bundle_short_version=`get_info_plist_value CFBundleShortVersionString`
bundle_version=`get_info_plist_value CFBundleVersion`
rollout_build=`(. "$LIB_DIR"/versions; echo $build)`

"${LIB_DIR}/create_dynamic_swizzler.rb" "$TMP_FILE" > "${ROLLOUT_DIR}/Rollout/RolloutSwizzlerDynamic.include"
if [ $MODE == "debug" ] ; then  
  echo Log file in $LOG_FILE
else
  rm -f "$LOG_FILE"
fi

create_json_file() {
  local json_file="$1"
  local include_data=$2

  echo -ne '{' > "$json_file"
  [ -z "$include_data" ] || {
    echo -ne '"data":' >> "$json_file"
    cat "$TMP_FILE" >> "$json_file"
    echo -ne ',' >> "$json_file"
  }
  echo -ne "\"arch\":\"$NATIVE_ARCH\",\"md5\":\"$data_md5\",\"env_GCC_PREPROCESSOR_DEFINITIONS__DEBUG\":\"$preprocessor_debug\",\"rollout_appKey\":\"$app_key\",\"CFBundleShortVersionString\":\"$bundle_short_version\",\"CFBundleVersion\":\"$bundle_version\",\"rollout_build\":\"$rollout_build\"}" >> "$json_file"
}

create_json_file "$JSON_WITH_DATA" include_data
create_json_file "$JSON_WITHOUT_DATA"

rm -f "$TMP_FILE"

# Compress and archive/upload the JSON if needed
unset do_not_archive_json
[ -r  "${INSTALL_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}" ] || do_not_archive_json=1
if [ -z "$do_not_archive_json" -o -z "$disable_upload" ]; then
  named_gzipped_json=Rollout__structures__"$app_key"__"$NATIVE_ARCH"__"$bundle_version"__"$data_md5"__`date +"%Y-%m-%d_%H:%M:%S"`.json.gz
  gzip -f -k "$JSON_WITH_DATA"
  gzipped_json="$JSON_WITH_DATA".gz
  
  if [ -z "$do_not_archive_json" ]; then
    mkdir -p "$STRUCTURES_ARCHIVE_DIR"
    cp "$gzipped_json" "$STRUCTURES_ARCHIVE_DIR"/$named_gzipped_json
  fi

  if [ -z "$disable_upload" ]; then
    mkdir -p "$STRUCTURES_PENDING_UPLOAD_DIR"
    gzipped_json_for_uploading="$STRUCTURES_PENDING_UPLOAD_DIR"/$named_gzipped_json

    case `(. "$LIB_DIR"/versions; echo $mode)` in
      development)
        export ROLLOUT_structureUploadingServer=localhost:9000
	;;
      qa)
        export ROLLOUT_structureUploadingServer=qa.rollout.io
	;;
      production)
        unset ROLLOUT_structureUploadingServer
	;;
    esac
    
    cp "$gzipped_json" "$gzipped_json_for_uploading"
    (
      "$LIB_DIR"/upload_structure.rb "$gzipped_json_for_uploading"
      rm "$gzipped_json_for_uploading"
    ) > /dev/null 2>&1 &
  fi
fi

# Copy JSON_WITHOUT_DATA:
cp -v "$JSON_WITHOUT_DATA"  "${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/"
if [ -r  "${INSTALL_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}" ]; then
  echo "Rollout: Installation mode, special copy" 
  cp -v "$JSON_WITHOUT_DATA"  "${INSTALL_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"
fi
